panel.first = grid())
lines(ages, br_emssb_v2021_f, type = 'l', col = 'orange', lwd = 2)
lines(0:116, br_emssb_v2021_f, type = "l", col = "green")
plot(0:115, ibge_2023_extrap_f, type = "l", col = "blue", xlab = "Idade", ylab = "probabilidade de morte",  main = "Comparação - qx")
lines(0:115, at_2000_f, type = "l", col = "red")
lines(0:116, br_emssb_v2021_f, type = "l", col = "green")
legend("topright", legend = c("IBGE 2023 F", "AT 2000 F", "BR-EMS F"),
col = c("blue", "red", "green"), lty = 1)
plot(0:115, log(ibge_2023_extrap_f), type = "l", col = "blue", xlab = "Idade", ylab = "probabilidade de morte",  main = "Comparação - qx")
lines(0:116, log(br_emssb_v2021_f), type = "l", col = "green")
plot(0:115, log(ibge_2023_extrap_f), type = "l", col = "blue", xlab = "Idade", ylab = "probabilidade de morte",  main = "Comparação - qx")
lines(0:115, log(at_2000_f), type = "l", col = "red")
lines(0:116, log(br_emssb_v2021_f), type = "l", col = "green")
legend("topright", legend = c("IBGE 2023 F", "AT 2000 F", "BR-EMS F"),
col = c("blue", "red", "green"), lty = 1)
plot(0:115, log(ibge_2023_extrap_f), type = "l", col = "blue", xlab = "Idade", ylab = "probabilidade de morte",  main = "Comparação - qx")
lines(0:115, log(at_2000_f), type = "l", col = "red")
lines(0:116, log(br_emssb_v2021_f), type = "l", col = "green")
legend("leftright", legend = c("IBGE 2023 F", "AT 2000 F", "BR-EMS F"),
col = c("blue", "red", "green"), lty = 1)
legend("downright", legend = c("IBGE 2023 F", "AT 2000 F", "BR-EMS F"),
col = c("blue", "red", "green"), lty = 1)
plot(0:115, log(ibge_2023_extrap_f), type = "l", col = "blue", xlab = "Idade", ylab = "Log(Probabilidade de morte)",  main = "Comparação - qx")
lines(0:115, log(at_2000_f), type = "l", col = "red")
lines(0:116, log(br_emssb_v2021_f), type = "l", col = "green")
legend("bottomleft", legend = c("IBGE 2023 F", "AT 2000 F", "BR-EMS F"),
col = c("blue", "red", "green"), lty = 1)
plot(0:115, log(ibge_2023_extrap_f), type = "l", col = "blue", xlab = "Idade", ylab = "Log(Probabilidade de morte)",  main = "Comparação - qx")
lines(0:115, log(at_2000_f), type = "l", col = "red")
lines(0:116, log(br_emssb_v2021_f), type = "l", col = "green")
legend("bottomright", legend = c("IBGE 2023 F", "AT 2000 F", "BR-EMS F"),
col = c("blue", "red", "green"), lty = 1)
install.packages("shiny")
library("shiny")
ui <- fluidPage("Olá, mundo!")
server <- function(input, output, session) {
}
shinyApp(ui, server)
runApp('VSC/R/calculadora_atuarial/run.R')
runApp('VSC/R/calculadora_atuarial/run.R')
shinyApp(ui, server)
# Limpar ambiente
rm(list = ls())
# Verificar se as bibliotecas necessárias estão instaladas
required_packages <- c("shiny")
for (pkg in required_packages) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, dependencies = TRUE)
library(pkg, character.only = TRUE)
}
}
# Verificar se os arquivos principais existem
arquivos_necessarios <- c("ui.R", "server.R", "global.R")
arquivos_faltando <- arquivos_necessarios[!file.exists(arquivos_necessarios)]
if (length(arquivos_faltando) > 0) {
stop(paste("Arquivos não encontrados:", paste(arquivos_faltando, collapse = ", ")))
}
shinyApp(ui, server)
server <- function(input, output, session) {
}
# ui.R - Interface do Usuário
library(shiny)
ui <- fluidPage(
# Título do app
titlePanel("Calculadora Atuarial")
)
runApp('VSC/R/calculadora_atuarial/run.R')
# Limpar ambiente
rm(list = ls())
runApp('VSC/R/calculadora_atuarial')
# ui.R - Interface do Usuário
library(shiny)
ui <- fluidPage(
# Título do app
titlePanel("Calculadora Atuarial")
)
# server.R - Lógica do Servidor
library(shiny)
server <- function(input, output, session) {
}
# Limpar ambiente
rm(list = ls())
# Verificar se as bibliotecas necessárias estão instaladas
required_packages <- c("shiny")
for (pkg in required_packages) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, dependencies = TRUE)
library(pkg, character.only = TRUE)
}
}
for (pkg in required_packages) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, dependencies = TRUE)
library(pkg, character.only = TRUE)
}
}
# Verificar se os arquivos principais existem
arquivos_necessarios <- c("ui.R", "server.R", "global.R")
arquivos_faltando <- arquivos_necessarios[!file.exists(arquivos_necessarios)]
if (length(arquivos_faltando) > 0) {
stop(paste("Arquivos não encontrados:", paste(arquivos_faltando, collapse = ", ")))
}
shinyApp(ui, server)
# Verificar se os arquivos principais existem
arquivos_necessarios <- c("ui.R", "server.R", "global.R")
arquivos_faltando <- arquivos_necessarios[!file.exists(arquivos_necessarios)]
if (length(arquivos_faltando) > 0) {
stop(paste("Arquivos não encontrados:", paste(arquivos_faltando, collapse = ", ")))
}
source('VSC/R/calculadora_atuarial/run.R')
runApp('VSC/R/calculadora_atuarial')
source('VSC/R/calculadora_atuarial/run.R')
runApp('VSC/R/calculadora_atuarial')
# Limpar ambiente
rm(list = ls())
setwd("C:\Users\João Pedro Stênio\Documents\VSC\R")
setwd("C:/Users/João Pedro Stênio/Documents/VSC/R/calculadora_aturial")
# Carregar bibliotecas
library(shiny)
# Carregar arquivos na ordem correta
source("global.R")  # Carrega primeiro as variáveis globais
source("ui.R")      # Carrega a interface
source("server.R")  # Carrega o servidor
# Verificar se os objetos foram carregados
if (!exists("ui") || !exists("server")) {
stop("Erro: objetos 'ui' e/ou 'server' não foram carregados corretamente")
}
# Carregar arquivos na ordem correta
source("global.R")
getwd()
setwd("C:/Users/'João Pedro Stênio'/Documents/VSC/R/calculadora_aturial")
setwd("C:/Users/João Pedro Stênio/Documents/VSC/R/calculadora_aturial")
setwd("C:/Users/João Pedro Stênio/Documents/VSC/R/calculadora_aturial")
getwd()
getwd()
setwd("C:/Users/João Pedro Stênio/Documents/VSC/R/calculadora_aturial")
getwd()
dir.exists("C:/Users")
list.dirs("C:/Users", recursive = FALSE, full.names = FALSE)
Sys.getenv("USERPROFILE"
Sys.getenv("USERPROFILE")
# Construir caminho usando variáveis do sistema
usuario <- Sys.getenv("USERNAME")
caminho <- paste0("C:/Users/", usuario, "/Documents/VSC/R/calculadora_aturial")
setwd(caminho)
getwd()
setwd("C:/Users/João Pedro Stênio/Documents/VSC")
setwd("C:/Users/João Pedro Stênio/Documents/VSC/R")
setwd("C:/Users/João Pedro Stênio/Documents/VSC/R/calculadora_atuarial")
# Carregar bibliotecas
library(shiny)
# Carregar arquivos na ordem correta
source("global.R")
source("ui.R")
source("server.R")
getwd()
setwd("C:/Users/João Pedro Stênio/Documents/VSC/R/calculadora_atuarial")
# Carregar bibliotecas
library(shiny)
# Carregar arquivos na ordem correta
source("global.R")
source("ui.R")
source("server.R")
# Verificar se os objetos foram carregados
if (!exists("ui") || !exists("server")) {
stop("Erro: objetos 'ui' e/ou 'server' não foram carregados corretamente")
}
# Carregar arquivos na ordem correta
source("global.R")
source("ui.R")
source("server.R")
# Verificar se os objetos foram carregados
if (!exists("ui") || !exists("server")) {
stop("Erro: objetos 'ui' e/ou 'server' não foram carregados corretamente")
}
# Executar aplicação
cat("Iniciando aplicação Shiny...\n")
shinyApp(ui = ui, server = server)
runApp('run.R')
runApp('run.R')
install.packages("bslib ")
install.packages("bslib")
# Carregar bibliotecas
library(shiny)
library(bslib)
runApp('run.R')
runApp()
runApp()
runApp('run.R')
runApp('run.R')
runApp('run.R')
library(shinythemes)
install.packages("library(shinythemes)")
install.packages("shinythemes")
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp('run.R')
getwd()
setwd("C:/Users/João Pedro Stênio/Documents/VSC/R/calculadora_atuarial")
# Carregar bibliotecas
library(shiny)
library(bslib)
library(shinythemes)
# Carregar arquivos na ordem correta
source("global.R")
source("ui.R")
runApp()
getwd()
setwd("C:/Users/João Pedro Stênio/Documents/VSC/R/calculadora_atuarial")
# Carregar bibliotecas
library(shiny)
library(bslib)
library(shinythemes)
# Carregar arquivos na ordem correta
source("global.R")
source("ui.R")
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp('run.R')
install.packages("shinyWidgets")
library(shinyWidgets)
runApp('run.R')
runApp('run.R')
install.packages("dyplr")
library(dyplr)
install.packages("dplyr")
library(dplyr)
gwtwd()
getwd()
# Lista de tábuas
tabuas = list("petros_geracional", "at_2000_masc", "at_2000_fem", "mp_2021_fem", "mp_2021_masc")
getwd()
install.packages("DT")
library(DT) # Biblioteca para tabelas interativas (recomendado)
runApp('run.R')
runApp()
install.packages("shinythemes")
# ui.R - Interface do Usuário Melhorada
library(shiny)
library(shinythemes) # Pacote necessário para o tema "cerulean"
library(shinyWidgets)
library(DT) # Pacote para o dataTableOutput
runApp()
runApp()
runApp('run.R')
# Carregar bibliotecas
library(shiny)
library(bslib)
library(shinythemes)
# Carregar arquivos na ordem correta
source("global.R")
source("ui.R")
source("server.R")
# Verificar se os objetos foram carregados
if (!exists("ui") || !exists("server")) {
stop("Erro: objetos 'ui' e/ou 'server' não foram carregados corretamente")
}
runApp()
runApp('run.R')
runApp('run.R')
runApp()
runApp('run.R')
runApp()
runApp()
runApp()
runApp()
# Função para calcular a tábua de vida
calcular_tabua <- function(vetor_qx, raiz_lx = 100000) {
# Tamanho do vetor de probabilidades
n <- length(vetor_qx)
# Idades
x <- 0:(n - 1)
# Probabilidade de morte
qx <- vetor_qx
# Cálculo da probabilidade de sobrevivência
px <- 1 - qx
# Inicializa o número de sobreviventes e de mortes
lx <- numeric(n)
dx <- numeric(n)
# Cálculo do número de sobreviventes em x = 0
lx[1] <- raiz_lx
# Cálculo do lx para x >= 1
if (n > 1) {
for (i in 2:n) {
lx[i] <- lx[i-1] * px[i-1]
}
}
# Cálculo do número de mortes
dx <- lx * qx
# Formação da tábua de vida
tabua_de_vida <- data.frame(x = x, lx = lx, dx = dx, qx = qx, px = px)
# Retorna a tábua completa
return(tabua_de_vida)
}
# Função para calcular a tábua de vida
calcular_tabua <- function(vetor_qx, raiz_lx = 100000) {
# Tamanho do vetor de probabilidades
n <- length(vetor_qx)
# Idades
x <- 0:(n - 1)
# Probabilidade de morte
qx <- vetor_qx
# Cálculo da probabilidade de sobrevivência
px <- 1 - qx
# Inicializa o número de sobreviventes e de mortes
lx <- numeric(n)
dx <- numeric(n)
# Cálculo do número de sobreviventes em x = 0
lx[1] <- raiz_lx
# Cálculo do lx para x >= 1
if (n > 1) {
for (i in 2:n) {
lx[i] <- lx[i-1] * px[i-1]
}
}
# Cálculo do número de mortes
dx <- lx * qx
# Formação da tábua de vida
tabua_de_vida <- data.frame(x = x, lx = lx, dx = dx, qx = qx, px = px)
# Retorna a tábua completa
return(tabua_de_vida)
}
# Função para anuidade de uma cabeça
ax <- function(inicio_cobertura, final_cobertura, i, x, tabua_x) {
# Função de desconto
v <- 1 / (1 + i)
# Vetor para armazenar parcelas da da anuidade
vetor_soma <- numeric()
# Loop para encontrar a parcela em cada tempo t
for (t in inicio_cobertura:final_cobertura) {
# Fator de desconto financeiro no tempo t
v_t <- v^t
# Probabilidade de sobrevivência entre x e x + t para o segurado x
t_p_x <- (tabua_x[x + t, "lx"]) / (tabua_x[x, "lx"])
# Parcela da anuidade no tempo t
a_x <- v_t * t_p_x
# Adiciona ao vetor para soma
vetor_soma <- c(vetor_soma, a_x)}
# Retorna o valor da unidade
return(sum(vetor_soma, na.rm = TRUE))
}
# Função para anuidade de duas cabeças - vida conjunta
axy_VC <- function(inicio_cobertura, final_cobertura, i, x, y, tabua_x, tabua_y) {
# Função de desconto
v <- 1 / (1 + i)
# Vetor para armazenar parcelas da da anuidade
vetor_soma <- numeric()
# Loop para encontrar a parcela em cada tempo t
for (t in inicio_cobertura:final_cobertura) {
# Fator de desconto financeiro no tempo t
v_t <- v^t
# Probabilidade de sobrevivência entre x e x + t para o segurado x
t_p_x <- (tabua_x[x + t, "lx"]) / (tabua_x[x, "lx"])
# Probabilidade de sobrevivência entre y e y + t para o segurado y
t_p_y <- (tabua_y[y + t, "lx"]) / (tabua_y[y, "lx"])
# Parcela da anuidade no tempo t
a_xy <- v_t * t_p_x * t_p_y
# Adiciona ao vetor para soma
vetor_soma <- c(vetor_soma, a_xy)}
# Retorna o valor da unidade
return(sum(vetor_soma, na.rm = TRUE))
}
# Função para anuidade de duas cabeças - último sobevivente
axy_US <- function(inicio_cobertura, final_cobertura, i, x, y, tabua_x, tabua_y) {
# Função de desconto
v <- 1 / (1 + i)
# Vetor para armazenar parcelas da da anuidade
vetor_soma <- numeric()
# Loop para encontrar a parcela em cada tempo t
for (t in inicio_cobertura:final_cobertura) {
# Fator de desconto financeiro no tempo t
v_t <- v^t
# Probabilidade de sobrevivência entre x e x + t para o segurado x
t_p_x <- (tabua_x[x + t, "lx"]) / (tabua_x[x, "lx"])
# Probabilidade de sobrevivência entre y e y + t para o segurado y
t_p_y <- (tabua_y[y + t, "lx"]) / (tabua_y[y, "lx"])
# Parcela da anuidade no tempo t
a_xy <- v_t * (t_p_x + t_p_y - (t_p_x * t_p_y))
# Adiciona ao vetor para soma
vetor_soma <- c(vetor_soma, a_xy)}
# Retorna o valor da unidade
return(sum(vetor_soma, na.rm = TRUE))
}
# Vetores com probabilidades de mortes para cada genêro
at_2000_f <- c(0.001794, 0.000755, 0.000392, 0.000290, 0.000232, 0.000189, 0.000156, 0.000131, 0.000131, 0.000134, 0.000140, 0.000148, 0.000158, 0.000170, 0.000183, 0.000197, 0.000212, 0.000228, 0.000244, 0.000260, 0.000277, 0.000294, 0.000312, 0.000330, 0.000349, 0.000367, 0.000385, 0.000403, 0.000419, 0.000435, 0.000450, 0.000463, 0.000476, 0.000488, 0.000500, 0.000515, 0.000534, 0.000558, 0.000590, 0.000630, 0.000677, 0.000732, 0.000796, 0.000868, 0.000950, 0.001043, 0.001148, 0.001267, 0.001400, 0.001548, 0.001710, 0.001888, 0.002079, 0.002286, 0.002507, 0.002746, 0.003003, 0.003280, 0.003578, 0.003907, 0.004277, 0.004699, 0.005181, 0.005732, 0.006347, 0.007017, 0.007734, 0.008491, 0.009288, 0.010163, 0.011165, 0.012339, 0.013734, 0.015391, 0.017326, 0.019551, 0.022075, 0.024910, 0.028074, 0.031612, 0.035580, 0.040030, 0.045017, 0.050600, 0.056865, 0.063907, 0.071815, 0.080682, 0.090557, 0.101307, 0.112759, 0.124733, 0.137054, 0.149552, 0.162079, 0.174492, 0.186647, 0.198403, 0.210337, 0.223027, 0.237051, 0.252985, 0.271406, 0.292893, 0.318023, 0.347373, 0.381520, 0.421042, 0.466516, 0.518520, 0.577631, 0.644427, 0.719484, 0.803380, 0.896693, 1.000000)
br_emssb_v2021_f <- c(0.000293, 0.000192, 0.000155, 0.000134, 0.000121, 0.000113, 0.000109, 0.000109, 0.000115, 0.000127, 0.000145, 0.000168, 0.000194, 0.000221, 0.000247, 0.000269, 0.000289, 0.000304, 0.000316, 0.000323, 0.000328, 0.000331, 0.000332, 0.000332, 0.000332, 0.000332, 0.000333, 0.000336, 0.000340, 0.000347, 0.000356, 0.000368, 0.000382, 0.000400, 0.000422, 0.000447, 0.000476, 0.000509, 0.000547, 0.000590, 0.000638, 0.000692, 0.000753, 0.000819, 0.000894, 0.000976, 0.001067, 0.001167, 0.001279, 0.001401, 0.001536, 0.001685, 0.001849, 0.002031, 0.002230, 0.002449, 0.002691, 0.002957, 0.003250, 0.003572, 0.003927, 0.004317, 0.004747, 0.005221, 0.005741, 0.006315, 0.006947, 0.007643, 0.008409, 0.009252, 0.010180, 0.011203, 0.012332, 0.013574, 0.014942, 0.016452, 0.018116, 0.019951, 0.021973, 0.024206, 0.026670, 0.029391, 0.032397, 0.035719, 0.039389, 0.043451, 0.047945, 0.052920, 0.058434, 0.064544, 0.071333, 0.078877, 0.087262, 0.096591, 0.106979, 0.118580, 0.131573, 0.146099, 0.162409, 0.180718, 0.201379, 0.224688, 0.251042, 0.280952, 0.315007, 0.353894, 0.398403, 0.449403, 0.507935, 0.575013, 0.651328, 0.736678, 0.828202, 0.916575, 0.980947, 0.999816, 1.000000)
ibge_2023_extrap_f <- c(0.01141794, 0.00072567, 0.00056693, 0.00044597, 0.00035597, 0.00029078, 0.00024543, 0.00021573, 0.00019832, 0.00019106, 0.00019253, 0.00020221, 0.00021994, 0.00024586, 0.00027962, 0.00032016, 0.00036497, 0.00041032, 0.00045275, 0.00048933, 0.00052006, 0.00054639, 0.00057086, 0.00059616, 0.00062361, 0.00065393, 0.00068666, 0.00072095, 0.00075630, 0.00079245, 0.00082993, 0.00086970, 0.00091309, 0.00096169, 0.00101712, 0.00108113, 0.00115527, 0.00124104, 0.00133904, 0.00144922, 0.00157006, 0.00169891, 0.00183329, 0.00197086, 0.00211173, 0.00225787, 0.00241326, 0.00258345, 0.00277302, 0.00298597, 0.00322415, 0.00348766, 0.00377583, 0.00408716, 0.00442068, 0.00477598, 0.00515446, 0.00555968, 0.00599932, 0.00648580, 0.00703628, 0.00767320, 0.00841435, 0.00927033, 0.01023287, 0.01126682, 0.01232513, 0.01335182, 0.01432332, 0.01526822, 0.01626517, 0.01745526, 0.01897842, 0.02096272, 0.02349561, 0.02656808, 0.03011759, 0.03400269, 0.03810321, 0.04242763, 0.04710451, 0.05247600, 0.05891147, 0.06668285, 0.07588555, 0.08612730, 0.09674144, 0.10687364, 0.11581986, 0.12361909, 0.12964288, 0.13646251, 0.14422749, 0.15312605, 0.16339820, 0.17535434, 0.18940220, 0.20608661, 0.22614930, 0.25062081, 0.28096341, 0.31929519, 0.36873332, 0.43386744, 0.52114142, 0.63775757, 0.78338449, 0.92415138, 0.99207241, 0.99993043, 1.00000000, 1.00000000, 1.00000000, 1.00000000, 1.00000000, 1.00000000)
at_2000_m <- c(0.002311, 0.000906, 0.000504, 0.000408, 0.000357, 0.000324, 0.000301, 0.000286, 0.000328, 0.000362, 0.000390, 0.000413, 0.000431, 0.000446, 0.000458, 0.000470, 0.000481, 0.000495, 0.000510, 0.000528, 0.000549, 0.000573, 0.000599, 0.000627, 0.000657, 0.000686, 0.000714, 0.000738, 0.000758, 0.000774, 0.000784, 0.000789, 0.000789, 0.000790, 0.000791, 0.000792, 0.000794, 0.000823, 0.000872, 0.000945, 0.001043, 0.001168, 0.001322, 0.001505, 0.001715, 0.001948, 0.002198, 0.002463, 0.002740, 0.003028, 0.003330, 0.003647, 0.003980, 0.004331, 0.004698, 0.005077, 0.005465, 0.005861, 0.006265, 0.006694, 0.007170, 0.007714, 0.008348, 0.009093, 0.009968, 0.010993, 0.012188, 0.013572, 0.015160, 0.016946, 0.018920, 0.021071, 0.023388, 0.025871, 0.028552, 0.031477, 0.034686, 0.038225, 0.042132, 0.046427, 0.051128, 0.056250, 0.061809, 0.067826, 0.074322, 0.081326, 0.088863, 0.096958, 0.105631, 0.114858, 0.124612, 0.134861, 0.145575, 0.156727, 0.168290, 0.180245, 0.192565, 0.205229, 0.218683, 0.233371, 0.249741, 0.268237, 0.289305, 0.313391, 0.340940, 0.372398, 0.408210, 0.448823, 0.494681, 0.546231, 0.603917, 0.668186, 0.739483, 0.818254, 0.904945, 1.000000)
br_emsmt_2021_m <- c(0.000371, 0.000242, 0.000213, 0.000199, 0.000192, 0.000188, 0.000186, 0.000187, 0.000189, 0.000196, 0.000209, 0.000233, 0.000270, 0.000324, 0.000394, 0.000476, 0.000568, 0.000662, 0.000752, 0.000833, 0.000902, 0.000957, 0.000998, 0.001025, 0.001040, 0.001047, 0.001048, 0.001046, 0.001043, 0.001042, 0.001045, 0.001053, 0.001069, 0.001093, 0.001126, 0.001170, 0.001224, 0.001290, 0.001367, 0.001458, 0.001561, 0.001679, 0.001812, 0.001960, 0.002126, 0.002311, 0.002515, 0.002740, 0.002989, 0.003263, 0.003565, 0.003896, 0.004260, 0.004659, 0.005098, 0.005578, 0.006106, 0.006684, 0.007318, 0.008014, 0.008776, 0.009610, 0.010526, 0.011529, 0.012627, 0.013832, 0.015151, 0.016596, 0.018179, 0.019914, 0.021814, 0.023894, 0.026171, 0.028663, 0.031392, 0.034378, 0.037646, 0.041222, 0.045131, 0.049412, 0.054094, 0.059213, 0.064809, 0.070923, 0.077606, 0.084900, 0.092859, 0.101542, 0.111011, 0.121327, 0.132568, 0.144808, 0.158118, 0.172581, 0.188281, 0.205300, 0.223746, 0.243699, 0.265255, 0.288544, 0.313596, 0.340524, 0.369367, 0.406268, 0.448631, 0.495199, 0.546163, 0.601691, 0.661565, 0.725026, 0.790594, 0.855636, 0.915352, 0.962980, 0.991263, 0.999622, 1.000000)
ibge_2023_extrap_m <- c(0.01347192, 0.00079573, 0.00063615, 0.00051052, 0.00041303, 0.00033878, 0.00028389, 0.00024527, 0.00022102, 0.00021031, 0.00021420, 0.00023604, 0.00028247, 0.00036576, 0.00050250, 0.00071313, 0.00100548, 0.00135792, 0.00171710, 0.00200777, 0.00219782, 0.00229415, 0.00233452, 0.00236186, 0.00239367, 0.00243723, 0.00248267, 0.00251669, 0.00253318, 0.00253048, 0.00251740, 0.00250559, 0.00250569, 0.00252702, 0.00257317, 0.00264571, 0.00274293, 0.00286183, 0.00299958, 0.00315321, 0.00332045, 0.00349928, 0.00368919, 0.00389068, 0.00410680, 0.00434250, 0.00460432, 0.00490019, 0.00523667, 0.00561952, 0.00605181, 0.00653422, 0.00706551, 0.00764219, 0.00825916, 0.00890956, 0.00958838, 0.01029305, 0.01103103, 0.01182097, 0.01269359, 0.01369258, 0.01485346, 0.01620011, 0.01772399, 0.01937175, 0.02106904, 0.02272296, 0.02428465, 0.02577707, 0.02729106, 0.02899999, 0.03106675, 0.03362413, 0.03673932, 0.04035496, 0.04436456, 0.04860590, 0.05298091, 0.05756748, 0.06257518, 0.06841896, 0.07549927, 0.08404689, 0.09406012, 0.10497743, 0.11597058, 0.12609449, 0.13464082, 0.14175324, 0.14975298, 0.15897292, 0.16967873, 0.18221597, 0.19704150, 0.21477013, 0.23624543, 0.26264902, 0.29567152, 0.33777938, 0.39261345, 0.46548270, 0.56346294, 0.69255992, 0.84329553, 0.96204575, 0.99818973, 0.99999657, 1.00000000, 1.00000000, 1.00000000, 1.00000000, 1.00000000, 1.00000000, 1.00000000, 1.00000000)
# Lista com as probabilidade de mortes
probabilidades <- list(
at_2000_f = at_2000_f,
br_emssb_v2021_f = br_emssb_v2021_f,
ibge_2023_extrap_f = ibge_2023_extrap_f,
at_2000_m = at_2000_m,
br_emsmt_2021_m = br_emsmt_2021_m,
ibge_2023_extrap_m = ibge_2023_extrap_m)
# Calcula todas as tábuas de mortalidade
tabuas <- lapply(probabilidades, calcular_tabua)
# Parâmetros
# Homem: x = 65 anos
x = 65
# Mulher: y = 62 anos
y = 62
# Benefício anual de 24.000 u.m.
b = 24000
# Taxa de juros: 5% a.a.
i = 0.05
# Separar tábuas masculinas e femininas
tabuas_f <- tabuas[grep("_f$", names(tabuas))]
tabuas_m <- tabuas[grep("_m$", names(tabuas))]
# Criar lista para armazenar resultados
resultados <- list()
# Loop pelas combinações
for (nome_f in names(tabuas_f)) {
for (nome_m in names(tabuas_m)) {
# Período de cobertura
inicio_cobertura <- 1
final_cobertura_vd <- min((length(probabilidades[[nome_f]]) - y - 1), (length(probabilidades[[nome_m]]) - x - 1))
final_cobertura_us <- max((length(probabilidades[[nome_f]]) - y - 1), (length(probabilidades[[nome_m]]) - x - 1))
final_cobertura_x <- (length(probabilidades[[nome_m]]) - x - 1)
final_cobertura_y <- (length(probabilidades[[nome_f]]) - y - 1)
# Cálculo da anuidade de vida conjunta
a_6562_VC <- axy_VC(inicio_cobertura, final_cobertura_vd, i, x, y, tabuas[[nome_m]], tabuas[[nome_f]])
# Cálculo da anuidade de último sobrevivente
a_6562_US_t <- axy_US(inicio_cobertura, final_cobertura_us, i, x, y, tabuas[[nome_m]], tabuas[[nome_f]])
# Cálculo da anuidade de último sobrevivente pela sugestão
a_65 <- ax(inicio_cobertura, final_cobertura_x, i, x, tabuas[[nome_m]])
a_62 <- ax(inicio_cobertura, final_cobertura_y, i, y, tabuas[[nome_f]])
a_6562_US <- (a_65 + a_62 - a_6562_VC)
# Valor de benefício
b_vd = b * a_6562_VC
b_us_a = b * a_6562_US
b_us = b * a_6562_US_t
# Formato monetário brasileiro
b_vd_fmt <- format(b_vd, big.mark = ".", decimal.mark = ",", nsmall = 2)
b_us_a_fmt <- format(b_us_a, big.mark = ".", decimal.mark = ",", nsmall = 2)
b_us_fmt <- format(b_us, big.mark = ".", decimal.mark = ",", nsmall = 2)
# Armazena o resultado
resultados[[paste(nome_m, nome_f, sep = "_")]] <- data.frame(Tábua_Masculina = nome_m, Tábua_Feminina  = nome_f, VC_Definicao = b_vd_fmt, US_Atalho = b_us_a_fmt, US_Definicao = b_us_fmt)
}
}
# Junta tudo em uma tabela comparativa
tabela_comparativa <- do.call(rbind, resultados)
rownames(tabela_comparativa) <- NULL; tabela_comparativa
plot(0:115, log(ibge_2023_extrap_f), type = "l", col = "blue", xlab = "Idade", ylab = "Log(Probabilidade de morte)",  main = "Comparação - qx")
lines(0:115, log(at_2000_f), type = "l", col = "red")
lines(0:116, log(br_emssb_v2021_f), type = "l", col = "green")
legend("bottomright", legend = c("IBGE 2023 F", "AT 2000 F", "BR-EMS F"),
col = c("blue", "red", "green"), lty = 1)
runApp()
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp()
runApp('run.R')
runApp('run.R')
runApp('run.R')
ui <- fluidPage(
# Titulo geral do aplicativo
titlePanel("Calculadora Atuarial"),
# Tema visual
theme = shinytheme("cerulean"),
# Layout
sidebarLayout(
# Painel lateral com inputs
sidebarPanel(
# Largura do painel lateral
width = 4,
# Titulo para os inputs
h4("Parâmetros de Entrada"),
# Input para o genero
selectInput(inputId = "genero", label = "Selecione o Gênero:", choices = c("Masculino", "Feminino", "Ambos"), selected = "Masculino"),
# Input para a tábua - Ligado ao server.R
uiOutput("tabua_ui"),
# Input para a idade do participante
numericInput(inputId = "idade", label = "Idade Atual:", value = 30, min = 0, max = 120),
# Input para o tempo de contribuicao
numericInput(inputId = "tempo_contribuicao", label = "Tempo de Contribuição (anos):", value = 10, min = 1, max = 100),
# Input para a taxa de juros com formatação percentual
sliderInput(inputId = "taxa_de_juros", label = "Taxa de Juros Anual:", min = 0, max = 20, value = 6, step = 0.5, post = "%"),
# Input para o beneficio projetado com formatação de moeda
autonumericInput(inputId = "beneficio_projetado", label = "Valor do Benefício Projetado:",  value = 50000, currencySymbol = "R$ ", currencySymbolPlacement = "p", decimalCharacter = ",", digitGroupSeparator = ".", minimumValue = 0)
),
# Painel principal para outputs
mainPanel(
width = 8,
# Paineis
tabsetPanel(
# Aba 1 - Visualização da tábua selecionada
tabPanel("Dados da Tábua",
h3("Dados da Tábua Selecionada"),
DT::dataTableOutput("tabela_exposta")
),
# Aba 2 - Visualização dos produtos atuariais
tabPanel("Cálculo Atuarial",
h3("Resultados dos Cálculos Atuariais"),
verbatimTextOutput("resultados_calculos")
)
)
)
)
)
runApp('run.R')
